{% extends 'base.html.twig' %}

{% block title %}Edit Quiz{% endblock %}

{% block stylesheets %}
    <style>
        /* Styles généraux de la page */
        body {
            background-color: #f8f9fa;
            font-family: 'Montserrat', sans-serif;
            color: #333;
            margin: 0;
            padding: 0;
        }

        .back-btn {
            background-color: var(--primary-color);
            border: 0;
            border-radius: var(--border-radius-large) !important;
            color: var(--white-color);
            max-width: 150px;
            padding: 10px 20px;
            text-align: center;
            display: inline-block;
            text-decoration: none;
            margin: 20px auto;
        }

        .site-header {
            background-color: #3498db;
            padding: 100px 0;
            color: white;
        }

        .site-header h2 {
            font-size: 2.5rem;
            font-weight: 700;
        }

        .topics-detail-block {
            border-radius: 12px;
            overflow: hidden;
        }

        .topics-detail-block img {
            width: 100%;
            height: auto;
        }

        /* Styles du formulaire */
        .custom-form {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            max-width: 800px;
            margin: 40px auto;
        }

        .custom-form:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

        .form-floating {
            margin-bottom: 1.5rem;
        }

        .form-floating .form-control {
            border-radius: 8px;
            padding: 1rem;
            border: 1px solid #ddd;
            background-color: #f8f9fa;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-floating .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.2);
            outline: none;
        }

        .form-floating label {
            color: #666;
            font-size: 0.9rem;
        }

        .form-floating textarea {
            resize: vertical;
            min-height: 120px;
        }

        /* Styles pour les messages d'erreur */
        .error-message {
            color: #dc3545; /* Rouge pour les erreurs */
            font-size: 0.875rem; /* Taille de police plus petite */
            margin-top: 0.25rem; /* Espace au-dessus du message */
            display: none; /* Masqué par défaut */
        }

        .is-invalid {
            border-color: #dc3545 !important; /* Bordure rouge pour les champs invalides */
        }

        /* Ajustements pour les écrans mobiles */
        @media (max-width: 768px) {
            .custom-form {
                padding: 20px;
            }

            .form-floating .form-control {
                padding: 10px;
            }

            button.btn {
                padding: 10px 20px;
            }
        }
    </style>
{% endblock %}

{% block body %}
    <main>
        <!-- En-tête de la page -->
        <header class="site-header d-flex flex-column justify-content-center align-items-center">
            <div class="container">
                <div class="row justify-content-center align-items-center">
                    <div class="col-lg-5 col-12 mb-5">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="{{ path('app_quiz_index') }}">Quiz</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Modifier Quiz</li>
                            </ol>
                        </nav>

                        <h2 class="text-white">Modifier Quiz</h2>

                        <div class="d-flex align-items-center mt-5">
                            <a href="#quiz-form" class="btn custom-btn custom-border-btn smoothscroll me-4">Modifier Quiz</a>
                            <a href="#top" class="custom-icon bi-bookmark smoothscroll"></a>
                        </div>
                    </div>

                    <div class="col-lg-5 col-12">
                        <div class="topics-detail-block bg-white shadow-lg">
                            <div class="topics-detail-block-image img-fluid bg-light d-flex align-items-center justify-content-center">
                                {% if quiz.livre and quiz.livre.imageCouverture %}
                                    <img id="imagePreview" src="{{ asset('uploads/images/' ~ quiz.livre.imageCouverture) }}" alt="Cover Image" style="max-width: 100%; max-height: 100%;" />
                                {% else %}
                                    <p class="text-muted" id="noImageText">Aucune image</p>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Section du formulaire de modification -->
        <section class="section-padding section-bg" id="quiz-form">
            <div class="container">
                <div class="row">
                    <div class="col-lg-8 col-12 m-auto">
                        {{ form_start(form, {'attr': {'class': 'custom-form contact-form', 'role': 'form', 'novalidate': 'novalidate'}}) }}
                            <div class="row">
                                <!-- Champ Question -->
                                <div class="col-lg-12 col-12">
                                    <div class="form-floating">
                                        {{ form_widget(form.question, {'attr': {'class': 'form-control', 'placeholder': 'Question', 'required': 'required'}}) }}
                                        {{ form_label(form.question, 'Question', {'label_attr': {'class': 'form-label'}}) }}
                                        <div class="error-message"></div> <!-- Message d'erreur pour la question -->
                                    </div>
                                </div>

                                <!-- Champ Options -->
                                <div class="col-lg-12 col-12">
                                    <div id="options-list" data-prototype="{{ form_widget(form.options.vars.prototype)|e }}">
                                        {% for optionField in form.options %}
                                            <div class="option-item">
                                                <div class="form-floating">
                                                    {{ form_widget(optionField, {'attr': {'class': 'form-control', 'placeholder': 'Option'}}) }}
                                                    {{ form_label(optionField, 'Option') }}
                                                </div>
                                                <button type="button" class="save-option btn btn-primary">Save</button>
                                                <button type="button" class="remove-option btn btn-danger">Remove</button>
                                            </div>
                                        {% endfor %}
                                    </div>
                                    <div class="text-danger error-message"></div> <!-- Custom error message placeholder -->
                                </div>

                                <!-- Add Option Button -->
                                <div class="col-lg-12 col-12">
                                    <button type="button" id="add-option" class="btn btn-secondary">Add Option</button>
                                </div>

                                <!-- Correct Option Field -->
                                <div class="col-lg-12 col-12">
                                    <div class="form-floating">
                                        {{ form_widget(form.optionCorrect, {'attr': {'class': 'form-control'}}) }}
                                        {{ form_label(form.optionCorrect, 'Correct Option') }}
                                        <div class="error-message"></div> <!-- Custom error message placeholder -->
                                    </div>
                                </div>

                                <!-- Bouton de soumission -->
                                <div class="col-lg-4 col-12 ms-auto">
                                    <button type="submit" class="form-control">{{ button_label|default('Modifier') }}</button>
                                </div>
                            </div>
                        {{ form_end(form) }}

                        <!-- Bouton de retour à la liste -->
                        <div class="col-lg-4 col-12 ms-auto">
                            <a href="{{ path('app_quiz_index') }}" class="back-btn">Retour</a>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const form = document.querySelector("form");
            const optionsList = document.getElementById("options-list");
            const addOptionBtn = document.getElementById("add-option");
            const correctOptionDropdown = document.getElementById("question_optionCorrect");
            const prototype = optionsList.dataset.prototype;
            let index = optionsList.children.length;

            // Prevent form submission if there are errors
            form.addEventListener("submit", function(event) {
                if (!validateForm()) {
                    event.preventDefault(); // Prevent submission if there are errors
                }
            });

            // Validate the form
            function validateForm() {
                let formValid = true;

                // Validate Question Field
                const questionField = form.querySelector('[name="question[question]"]');
                const questionError = questionField.parentElement.querySelector('.error-message');
                if (!questionField.value.trim()) {
                    formValid = false;
                    showError(questionField, 'La question est obligatoire.');
                } else {
                    clearError(questionField);
                }

                // Validate Options Field (exactly 4 options)
                const optionFields = optionsList.querySelectorAll('.option-item input');
                const optionsError = optionsList.querySelector('.error-message');
                if (optionFields.length !== 4) {
                    formValid = false;
                    showError(optionsList, 'Vous devez fournir exactement 4 options.');
                } else {
                    clearError(optionsList);
                }

                // Validate Correct Option Field
                const correctOptionField = form.querySelector('[name="question[optionCorrect]"]');
                const correctOptionError = correctOptionField.parentElement.querySelector('.error-message');
                if (!correctOptionField.value.trim()) {
                    formValid = false;
                    showError(correctOptionField, 'Veuillez sélectionner une option correcte.');
                } else {
                    clearError(correctOptionField);
                }

                return formValid; // Return true if the form is valid, false otherwise
            }

            // Show error message
            function showError(input, message) {
                const errorDiv = input.parentElement.querySelector('.error-message');
                if (errorDiv) {
                    errorDiv.textContent = message;
                    errorDiv.style.display = "block"; // Show the error message
                    input.classList.add('is-invalid'); // Add red border
                }
            }

            // Clear error message
            function clearError(input) {
                const errorDiv = input.parentElement.querySelector('.error-message');
                if (errorDiv) {
                    errorDiv.textContent = '';
                    errorDiv.style.display = "none"; // Hide the error message
                    input.classList.remove('is-invalid'); // Remove red border
                }
            }

            // Update correct option dropdown
            function updateCorrectOptionDropdown() {
                correctOptionDropdown.innerHTML = '<option value="">Select the correct option</option>'; // Clear existing options
                document.querySelectorAll('.option-item input').forEach(input => {
                    if (input.value.trim()) {
                        let newOption = document.createElement('option');
                        newOption.value = input.value;
                        newOption.textContent = input.value;
                        correctOptionDropdown.appendChild(newOption);
                    }
                });
            }

            // Add new option
            addOptionBtn.addEventListener('click', function () {
                // Ensure less than 4 options before adding more
                const currentOptionsCount = optionsList.querySelectorAll('.option-item').length;
                if (currentOptionsCount >= 4) {
                    alert("Vous ne pouvez ajouter que 4 options.");
                    return;
                }

                const newForm = prototype.replace(/__name__/g, index);
                const newDiv = document.createElement('div');
                newDiv.classList.add('option-item');
                newDiv.innerHTML = newForm;

                const inputField = newDiv.querySelector('input');
                inputField.name = 'question[options][' + index + ']'; // Adjusted to match 'question[options]'

                // Add Save button
                const saveBtn = document.createElement('button');
                saveBtn.type = 'button';
                saveBtn.textContent = 'Save';
                saveBtn.classList.add('save-option', 'btn', 'btn-primary');
                saveBtn.addEventListener('click', function (e) {
                    e.preventDefault(); // Prevent accidental deletion
                    saveOption(inputField);
                });

                // Add Remove button with confirmation prompt
                const removeBtn = document.createElement('button');
                removeBtn.type = 'button';
                removeBtn.textContent = 'Remove';
                removeBtn.classList.add('remove-option', 'btn', 'btn-danger');
                removeBtn.addEventListener('click', function () {
                    if (confirm('Êtes-vous sûr de vouloir supprimer cette option ?')) {
                        newDiv.remove();
                        updateCorrectOptionDropdown(); // Update dropdown when an option is removed
                    }
                });

                newDiv.appendChild(saveBtn);
                newDiv.appendChild(removeBtn);
                optionsList.appendChild(newDiv);
                index++;
            });

            // Save option logic
            function saveOption(inputField) {
                const optionText = inputField.value.trim();
                if (!optionText) {
                    alert('Veuillez entrer une option avant de sauvegarder.');
                    return;
                }

                updateCorrectOptionDropdown(); // Ensure dropdown updates
                alert('Option sauvegardée : ' + optionText);
            }

            // Handle remove buttons for existing options (dynamically added ones too)
            optionsList.addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-option')) {
                    e.preventDefault();
                    if (confirm('Êtes-vous sûr de vouloir supprimer cette option ?')) {
                        e.target.closest('.option-item').remove();
                        updateCorrectOptionDropdown(); // Update dropdown when an option is removed
                    }
                }
            });

            // Ensure dropdown updates on page load
            updateCorrectOptionDropdown();
        });
    </script>
{% endblock %}