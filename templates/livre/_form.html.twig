{% block stylesheets %}
    <style>
        /* General styles for the page */
        body {
            background-color: #f8f9fa;
            font-family: 'Montserrat', sans-serif;
            color: #333;
            margin: 0;
            padding: 0;
        }

        .site-header {
            background-color: #3498db;
            padding: 100px 0;
            color: white;
        }

        .site-header h2 {
            font-size: 2.5rem;
            font-weight: 700;
        }

        .topics-detail-block {
            border-radius: 12px;
            overflow: hidden;
        }

        .topics-detail-block img {
            width: 100%;
            height: auto;
        }

        /* Form Styling */
        .custom-form {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            max-width: 800px;
            margin: 40px auto;
        }

        .custom-form:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
        }

        .form-floating {
            margin-bottom: 1.5rem;
        }

        .form-floating .form-control {
            border-radius: 8px;
            padding: 1rem;
            border: 1px solid #ddd;
            background-color: #f8f9fa;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .form-floating .form-control:focus {
            border-color: #3498db;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.2);
            outline: none;
        }

        .form-floating label {
            color: #666;
            font-size: 0.9rem;
        }

        .form-floating textarea {
            resize: vertical;
            min-height: 120px;
        }

        /* File input styling */
        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-input-wrapper input[type="file"] {
            font-size: 1rem;
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            cursor: pointer;
            width: 100%;
            height: 100%;
        }

        .file-input-label {
            display: block;
            padding: 12px;
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 8px;
            text-align: center;
            color: #555;
            cursor: pointer;
            transition: background-color 0.3s ease, border-color 0.3s ease;
        }

        .file-input-label:hover {
            background-color: #e9ecef;
            border-color: #ccc;
        }

        /* Button styling */
        button.btn {
            background-color: #3498db;
            color: white;
            padding: 12px 25px;
            font-size: 1rem;
            font-weight: 600;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.3s ease;
            width: 100%;
            margin-top: 10px;
        }

        button.btn:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

        /* Back to List and Delete Form */
        .product-actions {
            display: flex;
            gap: 15px;
            margin-top: 30px;
            justify-content: center;
        }

        .btn-back {
            background-color: #27ae60;
            color: white;
        }

        .btn-back:hover {
            background-color: #219653;
            transform: translateY(-2px);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .custom-form {
                padding: 20px;
            }

            .form-floating .form-control {
                padding: 10px;
            }

            button.btn {
                padding: 10px 20px;
            }
        }
    </style>
{% endblock %}

{% block body %}
    <main>
        <!-- Header Section -->
        <header class="site-header d-flex flex-column justify-content-center align-items-center">
            <div class="container">
                <div class="row justify-content-center align-items-center">
                    <div class="col-lg-5 col-12 mb-5">
                        <nav aria-label="breadcrumb">
                            <ol class="breadcrumb">
                                <li class="breadcrumb-item"><a href="{{ path('app_livre_index') }}">Homepage</a></li>
                                <li class="breadcrumb-item active" aria-current="page">Create Livre</li>
                            </ol>
                        </nav>

                        <div class="d-flex align-items-center mt-5">
                            <a href="#livre-form" class="btn custom-btn custom-border-btn smoothscroll me-4">Create Livre</a>
                            <a href="#top" class="custom-icon bi-bookmark smoothscroll"></a>
                        </div>
                    </div>

                    <div class="col-lg-5 col-12">
                        <div class="topics-detail-block bg-white shadow-lg">
                            <div class="topics-detail-block-image img-fluid bg-light d-flex align-items-center justify-content-center">
                                <p class="text-muted">No image</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </header>

        <!-- Create Livre Form Section -->
        <section class="section-padding section-bg" id="livre-form">
            <div class="container">
                <div class="row">
                    <div class="col-lg-8 col-12 m-auto">
                        {{ form_start(form, {'attr': {'class': 'custom-form contact-form', 'role': 'form', 'novalidate': 'novalidate'}}) }}
    <div class="row">
        <!-- Titre Field -->
        <div class="col-lg-6 col-md-6 col-12">
            <div class="form-floating">
                {{ form_widget(form.titre, {'attr': {'class': 'form-control', 'placeholder': 'Titre', 'required': 'required'}}) }}
                {{ form_label(form.titre, 'Titre', {'label_attr': {'class': 'form-label'}}) }}
                <div class="text-danger error-message"></div> <!-- Custom error message placeholder -->
            </div>
        </div>

        <!-- Auteur Field -->
        <div class="col-lg-6 col-md-6 col-12">
            <div class="form-floating">
                {{ form_widget(form.auteur, {'attr': {'class': 'form-control', 'placeholder': 'Auteur', 'required': 'required'}}) }}
                {{ form_label(form.auteur, 'Auteur', {'label_attr': {'class': 'form-label'}}) }}
                <div class="text-danger error-message"></div> <!-- Custom error message placeholder -->
            </div>
        </div>

        <!-- Description Field -->
        <div class="col-lg-12 col-12">
            <div class="form-floating">
                {{ form_widget(form.description, {'attr': {'class': 'form-control', 'placeholder': 'Description', 'required': 'required', 'style': 'height: 150px;'}}) }}
                {{ form_label(form.description, 'Description', {'label_attr': {'class': 'form-label'}}) }}
                <div class="text-danger error-message"></div> <!-- Custom error message placeholder -->
            </div>
        </div>

        <!-- FichierUrl Field -->
        <div class="col-lg-6 col-md-6 col-12">
            <div class="form-floating">
                {{ form_widget(form.fichierUrl, {'attr': {'class': 'form-control', 'required': 'required'}}) }}
                {{ form_label(form.fichierUrl, 'Upload Book File', {'label_attr': {'class': 'form-label'}}) }}
                <div class="text-danger error-message"></div> <!-- Custom error message placeholder -->
            </div>
        </div>

        <!-- Image Couverture Field -->
        <div class="col-lg-6 col-md-6 col-12">
            <div class="form-floating">
                {{ form_widget(form.imageCouverture, {'attr': {'class': 'form-control'}}) }}
                {{ form_label(form.imageCouverture, 'Image de couverture', {'label_attr': {'class': 'form-label'}}) }}
                <div class="text-danger error-message"></div> <!-- Custom error message placeholder -->
            </div>
        </div>

        <!-- Genre Field -->
        <div class="col-lg-6 col-md-6 col-12">
            <div class="form-floating">
                {{ form_widget(form.genre, {'attr': {'class': 'form-control', 'placeholder': 'Genre', 'required': 'required'}}) }}
                {{ form_label(form.genre, 'Genre', {'label_attr': {'class': 'form-label'}}) }}
                <div class="text-danger error-message"></div> <!-- Custom error message placeholder -->
            </div>
        </div>

        <!-- Submit Button -->
        <div class="col-lg-4 col-12 ms-auto">
            <button type="submit" id="submitBtn" class="form-control">{{ button_label|default('Create') }}</button>
        </div>
    </div>
{{ form_end(form) }}

                        <!-- Back to List -->
                        <div class="product-actions mt-5">
                            <a href="{{ path('app_livre_index') }}" class="btn btn-back">Back to List</a>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

{% endblock %}
{% block javascripts %}
<script>
document.addEventListener("DOMContentLoaded", function() {
    const form = document.querySelector("form");

    // Prevent form submission if there are errors
    form.addEventListener("submit", function(event) {
        if (!validateForm()) {
            event.preventDefault(); // Prevent submission if there are errors
        }
        // If the form is valid, it will submit normally and redirect
    });

    // Validate the form
    function validateForm() {
        let formValid = true;

        // Validate each field
        form.querySelectorAll("input, textarea, select").forEach(input => {
            const errorDiv = input.parentElement.querySelector(".error-message");

            // Clear previous errors
            clearError(input);

            // Check for required fields
            if (input.hasAttribute("required") && !input.value.trim()) {
                formValid = false;
                showError(input, "Ce champ est obligatoire.");
            }

            // Validate Titre (max 50 characters)
            if (input.name === "livre[titre]" && input.value.length > 20) {
                formValid = false;
                showError(input, "Le titre ne doit pas dépasser 20 caractères.");
            }

            // Validate Auteur (max 30 characters)
                       if (input.name === "livre[auteur]") {
                const regex = /^[a-zA-ZÀ-ÿ\s]+$/; // Regex for letters and spaces
                if (input.value.length > 30) {
                    formValid = false;
                    showError(input, "L'auteur ne doit pas dépasser 30 caractères.");
                } else if (!regex.test(input.value)) {
                    formValid = false;
                    showError(input, "L'auteur ne doit contenir que des lettres et des espaces.");
                }
            }


            // Validate Description (min 20 characters)
            if (input.name === "livre[description]" && input.value.length < 20) {
                formValid = false;
                showError(input, "La description doit contenir au moins 20 caractères.");
            }

            // Validate FichierUrl (PDF or EPUB)
            if (input.name === "livre[fichierUrl]") {
                if (!input.files[0]) {
                    formValid = false;
                    showError(input, "Le fichier est obligatoire.");
                } else {
                    const file = input.files[0];
                    const validTypes = ["application/pdf", "application/epub+zip"];
                    if (!validTypes.includes(file.type)) {
                        formValid = false;
                        showError(input, "Veuillez télécharger un fichier PDF ou EPUB valide.");
                    }
                }
            }

            // Validate ImageCouverture (JPG or PNG)
            if (input.name === "livre[imageCouverture]" && input.files[0]) {
                const file = input.files[0];
                const validTypes = ["image/jpeg", "image/png"];
                if (!validTypes.includes(file.type)) {
                    formValid = false;
                    showError(input, "Veuillez télécharger une image valide (JPG/PNG).");
                }
            }
        });

        return formValid; // Return true if the form is valid, false otherwise
    }

    // Show error message
    function showError(input, message) {
        const errorDiv = input.parentElement.querySelector(".error-message");
        if (errorDiv) {
            errorDiv.textContent = message;
            input.classList.add("is-invalid");
        }
    }

    // Clear error message
    function clearError(input) {
        const errorDiv = input.parentElement.querySelector(".error-message");
        if (errorDiv) {
            errorDiv.textContent = "";
            input.classList.remove("is-invalid");
        }
    }
});
</script>

{% endblock %}